{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fillipi/Documents/GitHub/podcastrnext/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fillipi/Documents/GitHub/podcastrnext/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/fillipi/Documents/GitHub/podcastrnext/src/pages/episodes/[slug].tsx\";\nimport { format, parseISO } from 'date-fns';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\nexport var __N_SSG = true;\nexport default function Episode(_ref) {\n  var episode = _ref.episode;\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: episode.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = Episode;\nexport var geStaticProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var slug, _yield$api$get, data, episode;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            slug = ctx.params.slug;\n            _context.next = 3;\n            return api.get(\"/episodes/\".concat(slug));\n\n          case 3:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            episode = {\n              id: data.id,\n              title: data.title,\n              thumbnail: data.thumbnail,\n              members: data.members,\n              publishedAt: format(parseISO(data.published_at), 'd MMM yy'),\n              duration: Number(data.file.duration),\n              durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n              description: data.description,\n              url: data.file.url\n            };\n            return _context.abrupt(\"return\", {\n              props: {\n                episode: episode\n              },\n              revalidate: 60 * 60 * 24 // 24 hours\n\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function geStaticProps(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Episode\");","map":{"version":3,"sources":["/Users/fillipi/Documents/GitHub/podcastrnext/src/pages/episodes/[slug].tsx"],"names":["format","parseISO","api","convertDurationToTimeString","Episode","episode","title","geStaticProps","ctx","slug","params","get","data","id","thumbnail","members","publishedAt","published_at","duration","Number","file","durationAsString","description","url","props","revalidate"],"mappings":";;;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AAGA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,2BAAT,QAA4C,yCAA5C;;AAkBA,eAAe,SAASC,OAAT,OAA4C;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AACzD,sBACE;AAAA,cAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;KAJuBF,O;AAQxB,OAAO,IAAMG,aAA6B;AAAA,uEAAG,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCC,YAAAA,IADmC,GAC1BD,GAAG,CAACE,MADsB,CACnCD,IADmC;AAAA;AAAA,mBAGpBP,GAAG,CAACS,GAAJ,qBAAqBF,IAArB,EAHoB;;AAAA;AAAA;AAGnCG,YAAAA,IAHmC,kBAGnCA,IAHmC;AAKrCP,YAAAA,OALqC,GAK3B;AACdQ,cAAAA,EAAE,EAAED,IAAI,CAACC,EADK;AAEdP,cAAAA,KAAK,EAAEM,IAAI,CAACN,KAFE;AAGdQ,cAAAA,SAAS,EAAEF,IAAI,CAACE,SAHF;AAIdC,cAAAA,OAAO,EAAEH,IAAI,CAACG,OAJA;AAKdC,cAAAA,WAAW,EAAEhB,MAAM,CAACC,QAAQ,CAACW,IAAI,CAACK,YAAN,CAAT,EAA8B,UAA9B,CALL;AAMdC,cAAAA,QAAQ,EAAEC,MAAM,CAACP,IAAI,CAACQ,IAAL,CAAUF,QAAX,CANF;AAOdG,cAAAA,gBAAgB,EAAElB,2BAA2B,CAACgB,MAAM,CAACP,IAAI,CAACQ,IAAL,CAAUF,QAAX,CAAP,CAP/B;AAQdI,cAAAA,WAAW,EAAEV,IAAI,CAACU,WARJ;AASdC,cAAAA,GAAG,EAAEX,IAAI,CAACQ,IAAL,CAAUG;AATD,aAL2B;AAAA,6CAiBpC;AACLC,cAAAA,KAAK,EAAE;AACLnB,gBAAAA,OAAO,EAAPA;AADK,eADF;AAILoB,cAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,EAJjB,CAIqB;;AAJrB,aAjBoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7BlB,aAA6B;AAAA;AAAA;AAAA,GAAnC","sourcesContent":["import { format, parseISO } from 'date-fns';\nimport { GetStaticProps, GetStaticPaths } from 'next';\nimport { useRouter } from 'next/router'\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\n\ntype Episode = {\n  id: string;\n  title: string;\n  thumbnail: string;\n  members: string;\n  duration: number;\n  durationAsString: string;\n  url: string;\n  publishedAt: string;\n  description: string;\n};\n\ntype EpisodeProps = {\n  episode: Episode;\n}\n\nexport default function Episode({ episode }: EpisodeProps) {\n  return (\n    <h1>{episode.title}</h1>\n  )\n}\n\nexport const getStaticPaths: GetStaticPaths = {}\n\nexport const geStaticProps: GetStaticProps = async (ctx) => {\n  const { slug } = ctx.params;\n\n  const { data } = await api.get(`/episodes/${slug}`)\n\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy'),\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url,\n  };\n\n  return {\n    props: {\n      episode,\n    },\n    revalidate: 60 * 60 * 24, // 24 hours\n  }\n}"]},"metadata":{},"sourceType":"module"}