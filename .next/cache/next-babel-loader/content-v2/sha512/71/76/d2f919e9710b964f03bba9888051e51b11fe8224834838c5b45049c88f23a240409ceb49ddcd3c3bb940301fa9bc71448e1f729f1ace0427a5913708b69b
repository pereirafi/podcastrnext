{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fillipi/Documents/GitHub/podcastrnext/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fillipi/Documents/GitHub/podcastrnext/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fillipi/Documents/GitHub/podcastrnext/src/pages/episodes/[slug].tsx\",\n    _s = $RefreshSig$();\n\nimport { format, parseISO } from 'date-fns';\nimport { useRouter } from 'next/router';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\nexport default function Episode() {\n  _s();\n\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: router.query.slug\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Episode, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Episode;\nexport var geStaticProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var slug, _yield$api$get, data, episode;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            slug = ctx.params.slug;\n            _context.next = 3;\n            return api.get(\"/episodes/\".concat(slug));\n\n          case 3:\n            _yield$api$get = _context.sent;\n            data = _yield$api$get.data;\n            episode = {\n              id: data.id,\n              title: data.title,\n              thumbnail: data.thumbnail,\n              members: data.members,\n              publishedAt: format(parseISO(data.published_at), 'd MMM yy'),\n              duration: Number(data.file.duration),\n              durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n              description: data.description,\n              url: data.file.url\n            };\n            return _context.abrupt(\"return\", {\n              props: {},\n              revalidate: 60 * 60 * 24 // 24 hours\n\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function geStaticProps(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Episode\");","map":{"version":3,"sources":["/Users/fillipi/Documents/GitHub/podcastrnext/src/pages/episodes/[slug].tsx"],"names":["format","parseISO","useRouter","api","convertDurationToTimeString","Episode","router","query","slug","geStaticProps","ctx","params","get","data","episode","id","title","thumbnail","members","publishedAt","published_at","duration","Number","file","durationAsString","description","url","props","revalidate"],"mappings":";;;;;;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,2BAAT,QAA4C,yCAA5C;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAEA,sBACE;AAAA,cAAKI,MAAM,CAACC,KAAP,CAAaC;AAAlB;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GANuBH,O;UACPH,S;;;KADOG,O;AAQxB,OAAO,IAAMI,aAA6B;AAAA,sEAAG,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCF,YAAAA,IADmC,GAC1BE,GAAG,CAACC,MADsB,CACnCH,IADmC;AAAA;AAAA,mBAGpBL,GAAG,CAACS,GAAJ,qBAAqBJ,IAArB,EAHoB;;AAAA;AAAA;AAGnCK,YAAAA,IAHmC,kBAGnCA,IAHmC;AAKrCC,YAAAA,OALqC,GAK3B;AACdC,cAAAA,EAAE,EAAEF,IAAI,CAACE,EADK;AAEdC,cAAAA,KAAK,EAAEH,IAAI,CAACG,KAFE;AAGdC,cAAAA,SAAS,EAAEJ,IAAI,CAACI,SAHF;AAIdC,cAAAA,OAAO,EAAEL,IAAI,CAACK,OAJA;AAKdC,cAAAA,WAAW,EAAEnB,MAAM,CAACC,QAAQ,CAACY,IAAI,CAACO,YAAN,CAAT,EAA8B,UAA9B,CALL;AAMdC,cAAAA,QAAQ,EAAEC,MAAM,CAACT,IAAI,CAACU,IAAL,CAAUF,QAAX,CANF;AAOdG,cAAAA,gBAAgB,EAAEpB,2BAA2B,CAACkB,MAAM,CAACT,IAAI,CAACU,IAAL,CAAUF,QAAX,CAAP,CAP/B;AAQdI,cAAAA,WAAW,EAAEZ,IAAI,CAACY,WARJ;AASdC,cAAAA,GAAG,EAAEb,IAAI,CAACU,IAAL,CAAUG;AATD,aAL2B;AAAA,6CAiBpC;AACLC,cAAAA,KAAK,EAAE,EADF;AAELC,cAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,EAFjB,CAEqB;;AAFrB,aAjBoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7BnB,aAA6B;AAAA;AAAA;AAAA,GAAnC","sourcesContent":["import { format, parseISO } from 'date-fns';\nimport { GetStaticProps } from 'next';\nimport { useRouter } from 'next/router'\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\n\nexport default function Episode() {\n  const router = useRouter();\n\n  return (\n    <h1>{router.query.slug}</h1>\n  )\n}\n\nexport const geStaticProps: GetStaticProps = async (ctx) => {\n  const { slug } = ctx.params;\n\n  const { data } = await api.get(`/episodes/${slug}`)\n\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy'),\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url,\n  };\n\n  return {\n    props: {},\n    revalidate: 60 * 60 * 24, // 24 hours\n  }\n}"]},"metadata":{},"sourceType":"module"}