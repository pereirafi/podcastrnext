{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fillipi/Documents/GitHub/podcastrnext/src/context/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(true),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      toogleLoop: toogleLoop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"Vd8uUHqrxGjxTJ/L6BKT78IxB2M=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/Users/fillipi/Documents/GitHub/podcastrnext/src/context/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","list","index","togglePlay","toggleLoop","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","toogleLoop","usePlayer"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AA0BA,OAAO,IAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,OAAyE;AAAA;;AAAA,MAAxCC,QAAwC,QAAxCA,QAAwC;;AAAA,kBACxCJ,QAAQ,CAAC,EAAD,CADgC;AAAA,MACvEK,WADuE;AAAA,MAC1DC,cAD0D;;AAAA,mBAExBN,QAAQ,CAAC,CAAD,CAFgB;AAAA,MAEvEO,mBAFuE;AAAA,MAElDC,sBAFkD;;AAAA,mBAG5CR,QAAQ,CAAC,KAAD,CAHoC;AAAA,MAGvES,SAHuE;AAAA,MAG5DC,YAH4D;;AAAA,mBAI5CV,QAAQ,CAAC,IAAD,CAJoC;AAAA,MAIvEW,SAJuE;AAAA,MAI5DC,YAJ4D;;AAM9E,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASQ,UAAT,GAAsB;AACpBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASU,UAAT,GAAsB;AACpBP,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASS,eAAT,CAAyBC,KAAzB,EAAyC;AACvCX,IAAAA,YAAY,CAACW,KAAD,CAAZ;AACD;;AAED,MAAMC,WAAW,GAAGf,mBAAmB,GAAG,CAA1C;AACA,MAAMgB,OAAO,GAAIhB,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACmB,MAAxD;;AAEA,WAASC,QAAT,GAAoB;AAClB,QAAIF,OAAJ,EAAa;AACXf,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASmB,YAAT,GAAwB;AACtB,QAAIJ,WAAJ,EAAiB;AACfd,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,WAAW,EAAXA,WADK;AAELE,MAAAA,mBAAmB,EAAnBA,mBAFK;AAGLM,MAAAA,IAAI,EAAJA,IAHK;AAILE,MAAAA,QAAQ,EAARA,QAJK;AAKLU,MAAAA,QAAQ,EAARA,QALK;AAMLC,MAAAA,YAAY,EAAZA,YANK;AAOLjB,MAAAA,SAAS,EAATA,SAPK;AAQLE,MAAAA,SAAS,EAATA,SARK;AASLO,MAAAA,UAAU,EAAVA,UATK;AAULE,MAAAA,eAAe,EAAfA,eAVK;AAWLG,MAAAA,OAAO,EAAPA,OAXK;AAYLD,MAAAA,WAAW,EAAXA,WAZK;AAaLK,MAAAA,UAAU,EAAVA;AAbK,KADT;AAAA,cAiBGvB;AAjBH;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAlEeD,qB;;KAAAA,qB;AAoEhB,OAAO,IAAMyB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAC7B,SAAO3B,UAAU,CAACC,aAAD,CAAjB;AACD,CAFM;;IAAM0B,S","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  toggleLoop: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(true);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        playList,\n        playNext,\n        playPrevious,\n        isPlaying,\n        isLooping,\n        togglePlay,\n        setPlayingState,\n        hasNext,\n        hasPrevious,\n        toogleLoop\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}